name: ‚öóÔ∏è branch workflow

run-name: ‚öóÔ∏è @${{ github.triggering_actor }} triggered branch workflow on ${{ github.ref_name }}

on:
  push:
    branches:
      - main
      - next

jobs:
  lint:
    name: üßπ lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: asdf-vm/actions/install@9cd779f40fe38688dd19505ccbc4eaaf018b44e7
      - run: make init
      - run: make lint

  test-with-coverage:
    name: üß™ test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: asdf-vm/actions/install@9cd779f40fe38688dd19505ccbc4eaaf018b44e7
      - run: make init
      - run: make test/coverage
      - run: curl https://deepsource.io/cli | sh
      - name: deepsource report
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
        run: |
          ./bin/deepsource report \
            --analyzer test-coverage \
            --key javascript \
            --value-file "$(realpath ./coverage/lcov.info)"

  create-or-update-release-pr:
    name: üîÄ create release pr
    needs: [ lint, test-with-coverage ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        if: github.ref == 'refs/heads/next'
        with:
          fetch-depth: 0
      - uses: asdf-vm/actions/install@9cd779f40fe38688dd19505ccbc4eaaf018b44e7
        if: github.ref == 'refs/heads/next'
      - name: list commits
        run: |
          echo 'commits<<EOF' >> $GITHUB_OUTPUT
          echo "$(git log --format="%s****" origin/main...origin/next)" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
        id: list
        if: github.ref == 'refs/heads/next'
      - run: npm i --no-save conventional-commits-parser lodash
        if: github.ref == 'refs/heads/next'
      - uses: actions/github-script@v7
        if: github.ref == 'refs/heads/next'
        env:
          COMMITS: ${{ steps.list.outputs.commits }}
        with:
          script: |
            const {CommitParser} = await import('${{ github.workspace }}/node_modules/conventional-commits-parser/dist/index.js');
            const _ = require('lodash');
            const parser = new CommitParser({});
            const commits = JSON.parse(JSON.stringify(Object.fromEntries(Object.entries(
              _.groupBy(
                (process.env.COMMITS ?? []).split('****').filter(Boolean).map(parser.parse.bind(parser)),
                ({footer}) => !footer?.includes('BREAKING CHANGE') ? 'normal' : 'breaking',
              ),
            ).map(([type, commits]) => [type, _.groupBy(commits, ({type}) => type)]))));
            const body = _.template(`
            <% if (commits.breaking) { %>## Breaking Changes
            <% for (const [type, cs] of Object.entries(commits.breaking)) { %>
            ### <%= type.toUpperCase() %>
            <% for (const c of cs) { %>
            - <% if (c.scope) { %>(<%= c.scope %>) <% } %><%= c.subject %><% } %><% } %><% } %>
            <% if (commits.normal) { %>## Changes
            <% for (const [type, cs] of Object.entries(commits.normal)) { %>
            ### <%= type.toUpperCase() %>
            <% for (const c of cs) { %>
            - <% if (c.scope) { %>(<%= c.scope %>) <% } %><%= c.subject %><% } %><% } %>
            <% } %>
            `)({commits});
            
            console.log('body');
            console.log(body);
            
            try {
              await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: 'next',
                base: 'main',
                title: 'chore: release',
                body,
              });
            } catch (e) {
              console.log('error', e);
              const {data: [{number: pull_number}]} = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: 'next',
                base: 'main',
              });
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number,
                title: 'chore: release',
                body,
              });
            }

  publish-release:
    name: üìã publish release
    if: contains(fromJSON('["refs/heads/main", "refs/heads/next"]'), github.ref)
    needs: [ create-or-update-release-pr ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: asdf-vm/actions/install@9cd779f40fe38688dd19505ccbc4eaaf018b44e7
      - run: npm clean-install
      - run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
